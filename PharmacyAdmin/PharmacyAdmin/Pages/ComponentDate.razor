@using System.Globalization
@using System

@typeparam TValue


    <label>@Title</label>
    <input type="date"
           class="form-control"
           value="@FormatValueAsString(Value)"
           @onchange="@OnChange" />

@code {
    private const string DateFormat = "yyyy-MM-dd";
    CultureInfo provider = CultureInfo.InvariantCulture;
    private TValue _value;
    [Parameter] public string Title { get; set; }
    [Parameter]
    public TValue Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (EqualityComparer<TValue>.Default.Equals(value, _value))
            {
                return;
            }
            _value = value;
            ValueChanged.InvokeAsync(value);

        }
    }

    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    private void OnChange(ChangeEventArgs args)
    {
        try
        {
            //System.Diagnostics.Debug.WriteLine("editting" + args.Value);
            if (DateTime.TryParse(args.Value.ToString(), out DateTime discard) == false) return;
            //System.Diagnostics.Debug.WriteLine("passed" + args.Value);

            Value =
            (TValue)(object)
            DateTime
            .ParseExact(args.Value.ToString(), DateFormat, provider);
        }
        catch
        {
            Value = default(TValue); // not sure you want this
        }
    }
    protected string FormatValueAsString(TValue value)
    {
        switch (value)
        {
            case DateTime dateTimeValue:
                var r = BindConverter.FormatValue(dateTimeValue, DateFormat, provider);
                return r;
            default:
                return string.Empty;
        }
    }
}